function adjfighandle = ImageAdjuster(imgin,varargin)
% IMAGEADJUSTER: UI for interactive selection of IMADJUST parameters
%
% IMAGEADJUSTER launches an interactive,uicontrolled figure
% for use with the Image Processing Toolbox function
% IMADJUST. The class support for the input argument is the
% same as that for imadjust.
%
% The function will display two versions of the input image;
% the version of the left will be the original, un-adjusted
% image. The version on the right will change interactively
% when the slider controls are moved,updating the five
% arguments for imadjust: low_in, high_in, low_out,
% high_out, and gamma.(HELP IMADJUST for more details).
%
% When the "DONE/EXPORT" button is pressed, the output image
% will be written to the base workspace, along with the
% parameters used to create it, and the text of the command
% that will recreate it independent of ImageAdjuster.
%
% Syntax: IMAGEADJUSTER(IMGIN)
%
% h = IMAGEADJUSTER(IMGIN); (Outputs handle to the GUI figure.)
%
% h = IMAGEADJUSTER(...,initialSettings)
%    initialSettings: Optional input allows you to pass in a single cell
%       containing initial settings for either all-plane, or
%       individual-plane initial values. initialSettings MUST be entered as
%       a 1x3 cell matching one of these two formats:
%
%       For all-plane analyses:
%       initialSettings = {[low_in; high_in],[low_out; high_out],gamma}
%
%       or,for individual-plane analyses:
%       initialSettings = {[low_in_RED low_in_GREEN low_in_BLUE;
%                           high_in_RED high_in_GREEN high_in_BLUE],...
%                          [low_out_RED low_out_GREEN low_out_BLUE;
%                           high_out_RED high_out_GREEN high_out_GREEN],...
%                          [gamma_RED gamma_GREEN gamma_BLUE]}
%
%       Note that this is the same form generated by ImageAdjuster on export.
%
%
% NOTE: This is an update of the IntensityAdjust GUI I previously shared on
% the File Exchange. Use of this tool requires the Image Processing
% Toolbox.
%
% Written by Brett Shoelson,Ph.D.
% brett.shoelson@mathworks.com
% 9/03/2012
% Comments and suggestions welcome!
%
% Copyright 2012 MathWorks,Inc.
%
% SEE ALSO: IMADJUST

% Modifications:
% 2/23/13: Incorporated UIGETVARIABLES (via GETNEWIMAGE) to allow loading
%          from workspace variables.
% 2/25/13: Added "Auto-Adjust" button to add stretchlim-based starting
%          point. (Thanks to Abhijit Bhattacharjee for the suggestion!)
% 5/30/14: Modified to allow input of initial settings--for easy recall
%          of previously specified values. Also changed name (from
%          ImadjustGUI to ImageAdjuster) and prepared file for R2014b
%          readiness. Polished some formatting as well.

%bgc = [0.553 0.659 0.678];
bgc = [0 0 0];
highlightColor = [0.85 0.9 0.9];
panelTop = 0.25;
panelBottom = 0.025;

adjfig = figure('NumberTitle','off',...
	'name','Select Image Adjustment Values',...
	'units','normalized',...
	'windowstyle','normal',...
	'position',[0.05 0.1 0.9 0.825],...
	'tag','intensityadjfig',...
	'menubar','none',...
	'color',bgc);
set(adjfig,...
	'defaultuicontrolunits','normalized',...
	'defaultuicontrolbusyaction','cancel',...
	'defaultuicontrolinterruptible','off');

ht = uitoolbar(adjfig);
tmp = im2double(imread('file_open.png'));
tmp(tmp==0) = NaN;
uitoggletool(ht,...
	'CData',tmp,...
	'oncallback',@GetNewFile,...
	'offcallback','',...
	'Tooltipstring','Load new image.',...
	'Tag','loadImageTool');

tmp = imread('DefaultD.png');
uitoggletool(ht,...
	'CData',tmp,...
	'separator','on',...
	'oncallback',@resetDefaults,...
	'Tooltipstring','Resets all sliders to default values.');
if nargin == 0
	imgin = 'peppers.png';
end
initialSettings = [];
if nargin > 1
	initialSettings = varargin{1};
end
if ischar(imgin)
	imname = imgin;
	imgin = iptImread(imname);
else
	imname = 'Original';
end
%
[objpos,objdim] = distributeObjects(2,0.025,0.975,0.025);
[hobjpos,hobjdim] = distributeObjects(3,objpos(1)+0.025,objdim+objpos(1)-0.025,0.0375);
[vobjpos,vobjdim] = distributeObjects(4,panelBottom,panelTop,0.01);
ax(1) = axes('parent',adjfig,...
	'position',[objpos(1) 0.45 objdim 0.515],...
	'xtick',[],...
	'ytick',[]);
imshow(imgin,'parent',ax(1));
ax(2) = axes('parent',adjfig,...
	'position',[objpos(2) 0.45 objdim 0.515],...
	'xtick',[],...
	'ytick',[]);
imgOutHandle = imshow(imgin,...
	'parent',ax(2));
expandAxes(ax);
% Histograms
colors = [1 0 0; 0 1 0; 0 0 1];
histax = gobjects(6,1);
histaxMask = histax;
for ii = 1:size(imgin,3)
	histax(ii) = axes(...
		'parent',adjfig,...
		'position',[hobjpos(ii) 0.3 hobjdim 0.1],...
		'xtick',[],...
		'ytick',[]);
	refreshHistogram(histax(ii),imgin(:,:,ii),ii);
	% Determine the location and size of the annotation rectangle required
	% to enclose axes,tick mark labels,and title using the axes Position
	% and TightInset properties:
	p1 = get(histax(ii),'Position');
	if ii == 1
		ti = get(histax(ii),'TightInset');
	end
	x1 = p1(1)-1.25*ti(1); y1 = p1(2)-5*ti(2);
	if ii == 1
		w = x1+p1(3)+0.5*ti(1);
		h = p1(4)+6*ti(2);
	end
	histaxMask(ii) = annotation('rectangle',[x1,y1,w,h],...
		'FaceAlpha',0,...
		'FaceColor',get(adjfig,'color'),...
		'EdgeColor','none');
end
[hobjpos,hobjdim] = distributeObjects(3,objpos(2)+0.025,objdim+objpos(2)-0.025,0.0375);
for ii = 1:size(imgin,3)
	histax(ii+3) = axes(...
		'parent',adjfig,...
		'position',[hobjpos(ii) 0.3 hobjdim 0.1],...
		'xtick',[],...
		'ytick',[]);
	refreshHistogram(histax(ii+3),imgin(:,:,ii),ii);
	p1 = get(histax(ii+3),'Position');
	x1 = p1(1)-1.25*ti(1); y1 = p1(2)-5*ti(2);
	histaxMask(ii+3) = annotation('rectangle',[x1,y1,w,h],...
		'FaceAlpha',0,...
		'FaceColor',get(adjfig,'color'),...
		'EdgeColor','none');
end
%
processOpt = uibuttongroup('units','normalized',...
	'visible','off',...
	'parent',adjfig,...
	'backgroundcolor',highlightColor,...
	'position',[0.775+0.025 vobjpos(3) 0.2-0.025 panelTop-vobjpos(3)]);
rb(1) = uicontrol('Style','Radio',...
	'String','Process All Planes Together',...
	'position',[0.025 0.55 0.95 0.4],...
	'parent',processOpt,...
	'backgroundcolor',highlightColor,...
	'HandleVisibility','off',...
	'fontsize',10,...
	'fontweight','bold');
rb(2) = uicontrol('Style','Radio',...
	'String','Process Planes Individually',...
	'position',[0.025 0.05 0.95 0.4],...
	'parent',processOpt,...
	'backgroundcolor',highlightColor,...
	'HandleVisibility','off',...
	'fontsize',10,...
	'fontweight','bold');
% Initialize some button group properties.
set(processOpt,'SelectionChangeFcn',@changePanel)
if size(imgin,3) ~= 1
	set(processOpt,'Visible','on');
end
processPanel(1) = uipanel('parent',adjfig,...
	'backgroundcolor',highlightColor,...
	'position',[0.025 panelBottom 0.7625 panelTop-panelBottom],...
	'visible','on');
processPanel(2) = uipanel('parent',adjfig,...
	'backgroundcolor',highlightColor,...
	'position',[0.025 panelBottom 0.7625 panelTop-panelBottom],...
	'visible','off');

%
[objpos,objdim] = distributeObjects(3,0.05,0.95,0.05);
[vobjpos,vobjdim] = distributeObjects(2,0.025,0.75,0.015);
%%% PROCESS TOGETHER
uicontrol('style','text',...
	'string','J = imadjust(I,[LOW_IN; HIGH_IN],[LOW_OUT; HIGH_OUT],GAMMA)',...
	'parent',processPanel(1),...
	'position',[0.05 0.85 0.9 0.1],...
	'fontsize',10,...
	'backgroundcolor',highlightColor,...
	'fontweight','bold');
[lowInSlider,~,lowInText] = sliderPanel(processPanel(1),...
	{'Position',[objpos(1) vobjpos(2) objdim vobjdim],...
	'Title','LOW-IN',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',0,...
	'tag','lowin',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[lowOutSlider,~,lowOutText] = sliderPanel(processPanel(1),...
	{'Position',[objpos(2) vobjpos(2) objdim vobjdim],...
	'Title','LOW-OUT',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',0,...
	'tag','lowout',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[highInSlider,~,highInText] = sliderPanel(processPanel(1),...
	{'Position',[objpos(1) vobjpos(1) objdim vobjdim],...
	'Title','HIGH-IN',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',1,...
	'tag','highin',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[highOutSlider,~,highOutText] = sliderPanel(processPanel(1),...
	{'Position',[objpos(2) vobjpos(1) objdim vobjdim],...
	'Title','HIGH-OUT',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',1,...
	'tag','highout',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[gammaSlider,~,gammaSliderText] = sliderPanel(processPanel(1),...
	{'Position',[objpos(3) vobjpos(1) objdim vobjdim],...
	'Title','Gamma',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',10,...
	'Value',1,...
	'tag','gamma',...
	'callback',@update,...
	'backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');

%%% PROCESS SEPARATELY
uicontrol('style','text',...
	'string','J = imadjust(I,[LOW_IN; HIGH_IN],[LOW_OUT; HIGH_OUT],GAMMA)',...
	'parent',processPanel(2),...
	'position',[0.05 0.85 0.9 0.1],...
	'fontsize',10,...
	'backgroundcolor',highlightColor,...
	'fontweight','bold');

[objpos,objdim] = distributeObjects(3,0.015,0.985,0.025);
[hobjpos,hobjdim] = distributeObjects(3,objpos(1),objpos(1)+objdim,0.005);

[lowInSliderR,~,lowInTextR] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(1) vobjpos(2) hobjdim vobjdim],...
	'Title','LOW-IN',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',0,...
	'tag','lowin',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[lowOutSliderR,~,lowOutTextR] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(2) vobjpos(2) hobjdim vobjdim],...
	'Title','LOW-OUT',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',0,...
	'tag','lowout',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[highInSliderR,~,highInTextR] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(1) vobjpos(1) hobjdim vobjdim],...
	'Title','HIGH-IN',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',1,...
	'tag','highin',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[highOutSliderR,~,highOutTextR] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(2) vobjpos(1) hobjdim vobjdim],...
	'Title','HIGH-OUT',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',1,...
	'tag','highout',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[gammaSliderR,~,gammaSliderTextR] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(3) vobjpos(1) hobjdim vobjdim],...
	'Title','Gamma',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',10,...
	'Value',1,...
	'tag','gamma',...
	'callback',@update,...
	'backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
uicontrol('style','text',...
	'string','Red',...
	'parent',processPanel(2),...
	'position',[hobjpos(3) vobjpos(2) hobjdim 0.75*vobjdim],...
	'fontsize',18,...
	'horizontalalignment','left',...
	'backgroundcolor',highlightColor,...
	'foregroundcolor','r',...
	'fontweight','bold');

%%% PROCESS TOGETHER
%
[hobjpos,hobjdim] = distributeObjects(3,objpos(2),objpos(2)+objdim,0.01);

[lowInSliderG,~,lowInTextG] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(1) vobjpos(2) hobjdim vobjdim],...
	'Title','LOW-IN',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',0,...
	'tag','lowin',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[lowOutSliderG,~,lowOutTextG] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(2) vobjpos(2) hobjdim vobjdim],...
	'Title','LOW-OUT','Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',0,...
	'tag','lowout',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[highInSliderG,~,highInTextG] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(1),vobjpos(1),hobjdim,vobjdim],...
	'Title','HIGH-IN',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',1,...
	'tag','highin',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[highOutSliderG,~,highOutTextG] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(2) vobjpos(1) hobjdim vobjdim],...
	'Title','HIGH-OUT',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',1,...
	'tag','highout',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[gammaSliderG,~,gammaSliderTextG] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(3) vobjpos(1) hobjdim vobjdim],...
	'Title','Gamma',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',10,...
	'Value',1,...
	'tag','gamma',...
	'callback',@update,...
	'backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
uicontrol('style','text',...
	'string','Green',...
	'parent',processPanel(2),...
	'position',[hobjpos(3) vobjpos(2) hobjdim 0.75*vobjdim],...
	'fontsize',18,...
	'horizontalalignment','left',...
	'backgroundcolor',highlightColor,...
	'foregroundcolor',[0 0.5 0],...
	'fontweight','bold');
%
[hobjpos,hobjdim] = distributeObjects(3,objpos(3),objpos(3)+objdim,0.01);

[lowInSliderB,~,lowInTextB] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(1) vobjpos(2) hobjdim vobjdim],...
	'Title','LOW-IN',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',0,...
	'tag','lowin',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[lowOutSliderB,~,lowOutTextB] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(2) vobjpos(2) hobjdim vobjdim],...
	'Title','LOW-OUT',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',0,...
	'tag','lowout',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[highInSliderB,~,highInTextB] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(1) vobjpos(1) hobjdim vobjdim],...
	'Title','HIGH-IN',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',1,...
	'tag','highin',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[highOutSliderB,~,highOutTextB] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(2) vobjpos(1) hobjdim vobjdim],...
	'Title','HIGH-OUT',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',1,...
	'Value',1,...
	'tag','highout',...
	'callback',@update,...
	'Backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
[gammaSliderB,~,gammaSliderTextB] = sliderPanel(processPanel(2),...
	{'Position',[hobjpos(3) vobjpos(1) hobjdim vobjdim],...
	'Title','Gamma',...
	'Backgroundcolor',highlightColor},...
	{'Min',0,...
	'Max',10,...
	'Value',1,...
	'tag','gamma',...
	'callback',@update,...
	'backgroundcolor',bgc},...
	{'backgroundcolor',highlightColor},...
	{'Backgroundcolor',highlightColor},...
	'%0.2f');
uicontrol('style','text',...
	'string','Blue',...
	'parent',processPanel(2),...
	'position',[hobjpos(3) vobjpos(2) hobjdim 0.75*vobjdim],...
	'fontsize',18,...
	'horizontalalignment','left',...
	'backgroundcolor',highlightColor,...
	'foregroundcolor','b',...
	'fontweight','bold');

[vobjpos,vobjdim] = distributeObjects(4,panelBottom,panelTop,0.01);

%%% DONE
uicontrol('parent',adjfig,...
	'style','pushbutton',...
	'string','DONE / EXPORT',...
	'units','normalized',...
	'position',[0.775+0.025 vobjpos(1) 0.2-0.025 vobjdim],...
	'foregroundcolor',[1 .4 .4],...
	'fontname','Helvetica',...
	'fontsize',14,...
	'fontweight','bold',...
	'callback',@finish);
luckyButton = uicontrol('parent',adjfig,...
	'style','pushbutton',...
	'string','Auto-Adjust',...
	'units','normalized',...
	'position',[0.775+0.025 vobjpos(2) 0.2-0.025 vobjdim],...
	'foregroundcolor','k',...
	'fontname','Helvetica',...
	'fontsize',14,...
	'fontweight','bold',...
	'tooltipstring','Use |stretchlim| uniformly on all planes to saturate the top and bottom 1% of the intensities.',...
	'callback',@IFeelLucky);
set(adjfig,'handlevisibility','callback');

if ~isempty(initialSettings)
	msg = 'initialSettings failed';
	if ~iscell(initialSettings)
		beep;
		disp('Please see syntax notes above; your inputs are being ignored!')
		return
	else
		try
			in = initialSettings{1};
			out = initialSettings{2};
			gamma = initialSettings{3};
			if numel(gamma) == 1
				% all-plane analysis
				set(lowInSlider,'value',in(1));
				set(lowInText,'string',num2str(in(1)));
				set(lowOutSlider,'value',out(1));
				set(lowOutText,'string',num2str(out(1)));
				set(highInSlider,'value',in(2));
				set(highInText,'string',num2str(in(2)));
				set(highOutSlider,'value',out(2));
				set(highOutText,'string',num2str(out(2)));
				set(gammaSlider,'value',gamma);
				set(gammaSliderText,'string',num2str(gamma));
			elseif numel(gamma) == 3
				% individual-plane analysis
				set(lowInSliderR,'value',in(1,1));
				set(lowInTextR,'string',num2str(in(1,1)));
				set(lowOutSliderR,'value',out(1,1));
				set(lowOutTextR,'string',num2str(out(1,1)));
				set(lowInSliderG,'value',in(1,2));
				set(lowInTextG,'string',num2str(in(1,2)));
				set(lowOutSliderG,'value',out(1,2));
				set(lowOutTextG,'string',num2str(out(1,2)));
				set(lowInSliderB,'value',in(1,3));
				set(lowInTextB,'string',num2str(in(1,3)));
				set(lowOutSliderB,'value',out(1,3));
				set(lowOutTextB,'string',num2str(out(1,3)));
				set(highInSliderR,'value',in(2,1));
				set(highInTextR,'string',num2str(in(2,1)));
				set(highOutSliderR,'value',out(2,1));
				set(highOutTextR,'string',num2str(out(2,1)));
				set(highInSliderG,'value',in(2,2));
				set(highInTextG,'string',num2str(in(2,2)));
				set(highOutSliderG,'value',out(2,2));
				set(highOutTextG,'string',num2str(out(2,2)));
				set(highInSliderB,'value',in(2,3));
				set(highInTextB,'string',num2str(in(2,3)));
				set(highOutSliderB,'value',out(2,3));
				set(highOutTextB,'string',num2str(out(2,3)));
				set(gammaSliderR,'value',gamma(1));
				set(gammaSliderTextR,'string',num2str(gamma(1)));
				set(gammaSliderG,'value',gamma(2));
				set(gammaSliderTextG,'string',num2str(gamma(2)));
				set(gammaSliderB,'value',gamma(3));
				set(gammaSliderTextB,'string',num2str(gamma(3)));
				changePanel
			else
				disp('Please see syntax notes above; your inputs are being ignored!')
			end
			update;
		catch
			beep
			disp(msg)
		end
	end
end

if nargout > 0
	adjfighandle = adjfig;
else
	clear adjfighandle;
end

	function changePanel(varargin)
		if strcmp(get(processPanel(1),'visible'),'on')
			set(processPanel(1),'visible','off')
			set(processPanel(2),'visible','on')
			set(luckyButton,...
				'tooltipstring','Use |stretchlim| plane-by-plane to saturate the top and bottom 1% of the intensities.')
		else
			set(processPanel(1),'visible','on')
			set(processPanel(2),'visible','off')
			set(luckyButton,...
				'tooltipstring','Use |stretchlim| uniformly on all planes to saturate the top and bottom 1% of the intensities.')
		end
	end %finish

	function finish(varargin)
		processTogether = strcmp(get(processPanel(1),'visible'),'on');
		[lowin,lowout,highin,highout,gammaval] = getparams(processTogether);
		%
		fprintf('\n\nCALLING SYNTAX:\n**************************\n');
		% J = IMADJUST(I,[LOW_IN; HIGH_IN],[LOW_OUT; HIGH_OUT],GAMMA)
		if processTogether
			fprintf('imgout = imadjust(imgin,[%0.2f; %0.2f],[%0.2f; %0.2f],%0.2f);',lowin,highin,lowout,highout,gammaval);
			fprintf('\n\nOR\n\nprocessImage = @(x) imadjust(x,[%0.2f; %0.2f],[%0.2f; %0.2f],%0.2f);',lowin,highin,lowout,highout,gammaval);
			fprintf('\nimgout = processImage(imgin);');
			% fprintf('\n\nOR\n\nprocessImage = @(x,li,hi,lo,ho,g) imadjust(x,[li; hi],[lo; ho],g);');
			% fprintf('\nimgout = processImage(imgin,%0.2f,%0.2f,%0.2f,%0.2f,%0.2f);',lowin,highin,lowout,highout,gammaval)
		else
			fprintf('imgout = imadjust(imgin,[%0.2f %0.2f %0.2f; %0.2f %0.2f %0.2f],[%0.2f %0.2f %0.2f; %0.2f %0.2f %0.2f],[%0.2f %0.2f %0.2f]);',lowin,highin,lowout,highout,gammaval);
			fprintf('\n\nOR\n\nprocessImage = @(x) imadjust(x,[%0.2f %0.2f %0.2f; %0.2f %0.2f %0.2f],[%0.2f %0.2f %0.2f; %0.2f %0.2f %0.2f],[%0.2f %0.2f %0.2f]);',lowin,highin,lowout,highout,gammaval);
			fprintf('\nimgout = processImage(imgin);');
		end
		fprintf('\n**************************\n\n')
		varname = evalin('base','genvarname(''ImgOut'',who)');
		assignin('base',varname,get(imgOutHandle,'cdata'));
		fprintf('Output image written to variable %s in the base workspace.\n\n',varname);
	end %finish

	function GetNewFile(varargin)
		set(gcbo,'state','off');
		[imgin,cmap,fname,~,userCanceled] = getNewImage(false);
		if userCanceled
			return
		end
		if isempty(fname),fname = 'Original'; end
		imshow(imgin,cmap,...
			'parent',ax(1));
		title(fname,'parent',ax(1),...
			'interpreter','none');
		imgOutHandle = imshow(imgin,cmap,'parent',ax(2));
		title('Modified Image',...
			'interpreter','none',...
			'parent',ax(2));
		expandAxes(ax);
		update('all');
	end %GetNewFile

	function [lowin,lowout,highin,highout,gammaval,ii] = getparams(processTogether)
		if processTogether
			lowin = get(lowInSlider,'value');
			lowout = get(lowOutSlider,'value');
			highin = get(highInSlider,'value');
			highout = get(highOutSlider,'value');
			gammaval = get(gammaSlider,'value');
			highin(highin == 0) = eps;
			lowin(lowin >= highin) = highin-eps;
			set(lowInSlider,'value',lowin);
			set(lowInText,'string',num2str(lowin));
			set(highInSlider,'value',highin);
			set(highInText,'string',num2str(highin));
			set(gammaSliderText,'string',num2str(gammaval));
			drawnow
		else
			lowin = [get(lowInSliderR,'value'),...
				get(lowInSliderG,'value'),...
				get(lowInSliderB,'value')];
			lowout = [get(lowOutSliderR,'value'),...
				get(lowOutSliderG,'value'),...
				get(lowOutSliderB,'value')];
			highin = [get(highInSliderR,'value'),...
				get(highInSliderG,'value'),...
				get(highInSliderB,'value')];
			highout = [get(highOutSliderR,'value'),...
				get(highOutSliderG,'value'),...
				get(highOutSliderB,'value')];
			gammaval = [get(gammaSliderR,'value'),...
				get(gammaSliderG,'value'),...
				get(gammaSliderB,'value')];
			highin(highin == 0) = eps;
			for ii = 1:3
				if lowin(ii) >= highin(ii)
					lowin(ii) = highin(ii) -eps;
				end
			end
			set(lowInSliderR,'value',lowin(1));
			set(lowInSliderG,'value',lowin(2));
			set(lowInSliderB,'value',lowin(3));
			set(lowInTextR,'string',num2str(lowin(1)));
			set(lowInTextG,'string',num2str(lowin(2)));
			set(lowInTextB,'string',num2str(lowin(3)));
			set(highInSliderR,'value',highin(1));
			set(highInSliderG,'value',highin(2));
			set(highInSliderB,...
				'value',highin(3));
			set(highInTextR,'string',num2str(highin(1)));
			set(highInTextG,'string',num2str(highin(2)));
			set(highInTextB,'string',num2str(highin(3)));
			drawnow
		end
	end %getparams

	function IFeelLucky(varargin)
		% USE STRETCHLIM
		sl = stretchlim(imgin);
		opt = get(get(processOpt,'SelectedObject'),'string');
		switch opt
			case 'Process All Planes Together'
				if size(imgin,3) ~= 1
					beep
					disp('Processing all planes of an RGB Image simultaneously. You may get better results processing plane-by-plane.');
				end
				sl = mean(sl,2);
				set(lowInSlider,'value',sl(1));
				set(highInSlider,'value',sl(2));
			case 'Process Planes Individually'
				set(lowInSliderR,'value',sl(1));
				set(highInSliderR,'value',sl(2));
				set(lowInSliderG,'value',sl(3));
				set(highInSliderG,'value',sl(4));
				set(lowInSliderB,'value',sl(5));
				set(highInSliderB,'value',sl(6));
		end
		drawnow;
		update;
	end %IFeelLucky

	function imout = iptImread(imname,varargin)
		[~,~,ext] = fileparts(imname);
		switch ext
			case '.dcm'
				imout = dicomread(imname);
			case {'.fits','.fts'}
				imout = fitsread(imname);
			case '.img'
				try
					imout = analyze75read(imname);
				catch
					try
						imout = interfilered(imname);
					catch
						error('Unknown image format.');
					end
				end
			case '.nitf'
				imout = nitfread(imname);
			case '.hdr'
				imout = hdrread(imname);
			otherwise
				imout = imread(imname);
		end
	end %iptImread

	function refreshHistogram(theAx,thePlane,ind,varargin)
		axes(theAx);
		imhist(thePlane);
		if verLessThan('matlab','8.4')
			fo = findall(theAx,'type','line','linestyle','-');
			% Otherwise:
		else
			fo = findall(theAx,'type','stem','linestyle','-');
		end
		set(fo,'Color',colors(mod(ind-1,3)+1,:));
	end %refreshHistogram

	function resetDefaults(varargin)
		set(gcbo,'state','off');
		processTogether = strcmp(get(processPanel(1),...
			'visible'),'on');
		if processTogether
			set([lowInSlider,lowOutSlider],'value',0);
			set([highInSlider,highOutSlider,gammaSlider],'value',1);
			set([lowInText,lowOutText],'string','0');
			set([highInText,highOutText,gammaSliderText],'string','1');
		else
			set([lowInSliderR,lowOutSliderR,lowInSliderG,lowOutSliderG,lowInSliderB,lowOutSliderB],...
				'value',0);
			set([highInSliderR,highOutSliderR,gammaSliderR,highInSliderG,highOutSliderG,gammaSliderG,highInSliderB,highOutSliderB,gammaSliderB],...
				'value',1);
			set([lowInTextR,lowOutTextR,lowInTextG,lowOutTextG,lowInTextB,lowOutTextB],...
				'string','0');
			set([highInTextR,highOutTextR,gammaSliderTextR,highInTextG,highOutTextG,gammaSliderTextG,highInTextB,highOutTextB,gammaSliderTextB],...
				'string','1');
		end
		update;
	end %resetDefaults

	function ii = update(option,varargin)
		if ~nargin
			option = 'output';
		end
		% OPTION:
		%     'output': adjusts only output histograms
		%               (DEFAULT; no need to specify!)
		%     'all'   : adjusts all histograms (as on loading of new image)
		if size(imgin,3) == 1
			set(processOpt,'visible','off')
			%set(histaxMask([1,3:4,6]),'facealpha',1)
			set(histaxMask([1,4]),'facealpha',1)
			set(processPanel(1),'visible','on')
			set(processPanel(2),'visible','off')
			if size(imgin,3)==1
				set(luckyButton,...
					'tooltipstring',...
					'Use |stretchlim| to calculate values that saturate the top and bottom 1% of the intensities.')
			else
				set(luckyButton,...
					'tooltipstring',...
					'Use |stretchlim| uniformly on all planes to saturate the top and bottom 1% of the intensities.')
			end
		else
			set(processOpt,'visible','on')
			set(histaxMask,'facealpha',0)
		end
		set(rb(1),'value',strcmp(get(processPanel(1),...
			'visible'),'on'));
		set(rb(2),'value',~get(rb(1),'value'));
		processTogether = strcmp(get(processPanel(1),'visible'),'on');
		[lowin,lowout,highin,highout,gammaval] = getparams(processTogether);
		% ACTUAL ADJUSTMENT:
		imgout = imadjust(imgin,[lowin;highin],[lowout;highout],gammaval);
		set(imgOutHandle,'cdata',imgout);
		% REFRESH HISTOGRAMS
		% 'ALL'/'OUTPUT'; GRAYSCALE/COLOR; TOGETHER/SEPARATELY
		if strcmp(option,'all')
			% Update input histograms:
			if size(imgin,3) == 1
				refreshHistogram(histax(1),imgin,1)
			else
				for ii = 1:size(imgin,3)
					refreshHistogram(histax(ii),imgin(:,:,ii),ii);
				end
			end
		end
		% ALWAYS refresh output histograms on update:
		if size(imgin,3) == 1
			refreshHistogram(histax(4),imgout,1);
		else
			for ii = 4:6
				refreshHistogram(histax(ii),imgout(:,:,ii-3),ii-3);
			end
		end
	end %update

end