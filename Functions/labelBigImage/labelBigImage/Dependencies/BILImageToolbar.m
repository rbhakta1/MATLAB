function tsHandles = BILImageToolbar(figureToEnhance,axToUse,info)
% Insert toolbar for image manipulations in specified figure.
%             (CUSTOMIZED HERE FOR BIGIMAGELABELER)
%
% Inserts a new toolbar with several image-centric tools that augment
% the bigImageLabeler.
%
% TSHANDLES = IMAGETOOLBAR(FIGURETOENHANCE)
%
% Brett Shoelson, PhD
% brett.shoelson@mathworks.com
% 05/16/2016
%
% See also: imageToolbar makeUI

% Copyright 2016-2018 The MathWorks, Inc.

% Setup
IPTIconPath = fullfile(matlabroot,'toolbox','images','icons');
MATLABIconPath = fullfile(matlabroot,'toolbox','matlab','icons');
tbc = 240/255; %toolbar color, approximately
pushtoolIndex = 0;
toggletoolIndex = 0;

% UITOOLBAR
tsHandles.uitoolbars = uitoolbar(figureToEnhance,...
    'tag','AutogeneratedImageToolbar');
% ACKNOWLEDGEMENTS
[icon,map] = imread(fullfile(MATLABIconPath,'matlabicon.gif'));
icon = conditionIcon(icon,map,1,1);
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon,...
    'clickedCallback', @acknowledge,...
    'Tooltipstring', 'Acknowledgements');
% REMOVE TOOLBAR
% [icon,map] = imread(fullfile(IPTIconPath,'Error_16.png'));
% pushtoolIndex = pushtoolIndex + 1;
% tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
% 	'CData', icon,...
% 	'tag','RemoveToolbar',...
% 	'clickedCallback', @removeImageToolbar,...
% 	'Tooltipstring', 'REMOVE this toolbar!');
% IMAGE INFO
icon = imread(fullfile(IPTIconPath,'icon_info.png'));
icon = conditionIcon(icon,[],2,0);
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','INFO',...
    'clickedCallback', @getImageInfo,...
    'Tooltipstring', 'Show image metadata in Command Window');
% TOOLTIP SUPPRESSION
toggletoolIndex = toggletoolIndex + 1;
icon = imread('tooltipIcon2.png');
icon = conditionIcon(icon,[],2,1);
tsHandles.uitoggletools(toggletoolIndex) = uitoggletool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','toggleTooltips',...
    'clickedCallback', {@toggleTooltips,figureToEnhance},...
    'Tooltipstring', 'Toggle tooltips on or off');
% ZOOM/PAN (As Necessary)
% Create zoom object
zoomObj = zoom(figureToEnhance);
% ZOOM IN
icon = imread(fullfile(MATLABIconPath,'tool_zoom_in.png'));
icon = conditionIcon(icon,[],2,0);
toggletoolIndex = toggletoolIndex + 1;
tsHandles.uitoggletools(toggletoolIndex) = uitoggletool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','zoomIn',...
    'clickedCallback', {@zoomFig,zoomObj,'in'},...
    'Tooltipstring', 'Zoom in',...
    'separator', 'on');
% ZOOM OUT
icon = imread(fullfile(MATLABIconPath,'tool_zoom_out.png'));
icon = conditionIcon(icon,[],2,0);
toggletoolIndex = toggletoolIndex + 1;
tsHandles.uitoggletools(toggletoolIndex) = uitoggletool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','zoomOut',...
    'clickedCallback', {@zoomFig,zoomObj,'out'},...
    'Tooltipstring', 'Zoom out');
% PAN
panObj = pan(figureToEnhance);
icon = load(fullfile(MATLABIconPath,'pan.mat'));
icon = icon.cdata;
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uitoggletools(pushtoolIndex) = uitoggletool(tsHandles.uitoolbars,...
    'CData', icon, ...
    'clickedCallback', @panIt,...%{@panIt,panObj},...
    'Tooltipstring', 'Toggle Pan',...
    'separator', 'on');

% IMDISTLINE (Add/Remove)
% Add
[icon,map] = imread(fullfile(IPTIconPath,'distance_tool.gif'));
icon = conditionIcon(icon,map,1,[]);
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon, ...
    'clickedCallback', 'imdistline;',...(axToUse)
    'Tooltipstring', 'Add IMDISTLINE Tool',...
    'separator', 'on');
% Remove
icon = imcomplement(icon);
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon, ...
    'clickedCallback', 'delete(findall(ancestor(gcbo,''figure''),''tag'',''imline''))',...
    'Tooltipstring', 'Clear IMDISTLINE Tool(s)');

% MARKPOINTS (Add/Remove)
% Add
icon = ones(11);
icon([1:3, 9:13, 21:23, 33, 89, 99:101, 109:113, 119:121]) = 0;
icon(6, :) = 0;icon(:, 6) = 0;
icon2 = label2rgb(icon, tbc*ones(3), [0 0 1]);
icon2 = imresize(icon2,16/11,'nearest');
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon2, ...
    'clickedCallback',@callMarkImagePoints,...
    'Tooltipstring', 'Manually count objects');
% Remove
icon2 = label2rgb(~icon, tbc*ones(3), [0 0 1]);
icon2 = imresize(icon2,16/11,'nearest');
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon2, ...
    'clickedCallback', 'delete(findall(ancestor(gcbo,''figure''),''tag'',''impoint''))',...
    'Tooltipstring', 'Clear counting marks');

% APPS
% imageSegmenter
icon = im2double(imread(fullfile(IPTIconPath,'imageSegmenter_AppIcon_16.png')));
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','ImageSegmenter',...
    'separator', 'on',...
    'clickedCallback', @callImageSegmenter,...
    'Tooltipstring', 'Call imageSegmenter');
% segmentImage (BDS)
icon = im2double(imread(fullfile(IPTIconPath,'Refine_24px.png')));
icon = max(0,min(1,imresize(icon,16/size(icon,1),'nearest')));
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','segmentImage',...
    'clickedCallback', @callSegmentImage,...
    'Tooltipstring', 'Call segmentImage');
% colorThresholder
icon = im2double(imread(fullfile(IPTIconPath,'color_thresholder_16.png')));
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','ImageSegmenter',...
    'clickedCallback', @callColorThresholder,...
    'Tooltipstring', 'Call colorThresholder');
% imageMorphology (BDS)
icon = im2double(imread(fullfile(IPTIconPath,'Morphology_24.png')));
icon = max(0,min(1,imresize(icon,16/size(icon,1),'nearest')));
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','ImageMorphology',...
    'clickedCallback', @callImageMorphology,...
    'Tooltipstring', 'Call imageMorphology');
% circleFinder
icon = imread(fullfile(IPTIconPath,'STRELDISK_24.png'));
icon = imresize(icon,16/size(icon,1));
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','circleFinder',...
    'clickedCallback', @callCircleFinder,...
    'Tooltipstring', 'Call circleFinder');
% imageAdjuster (BDS)
[icon,map] = imread(fullfile(MATLABIconPath,'plotpicker-bar.gif'));
icon = conditionIcon(icon,map,1,[],[]);
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','imageAdjuster',...
    'clickedCallback', @callImageAdjuster,...
    'Tooltipstring', 'Call imageAdjuster');
% ExploreRGB (BDS)
icon = im2double(imread(fullfile(IPTIconPath,'NewColorSpace_24px.png')));
icon = max(0,min(1,imresize(icon,16/size(icon,1),'nearest')));
icon(icon==0) = NaN;
pushtoolIndex = pushtoolIndex + 1;
tsHandles.uipushtools(pushtoolIndex) = uipushtool(tsHandles.uitoolbars,...
    'CData', icon,...
    'tag','ExploreRGB',...
    'clickedCallback', @callExploreRGB,...
    'Tooltipstring', 'Call ExploreRGB');

% if ~nargout
%     clear('tsHandles');
% end

    function acknowledge(varargin)
        message = {'Comments/Suggestions welcome!';
            ' ';
            'Please address to:';
            'Brett Shoelson, PhD';
            'bshoelso@mathworks.com';
            ' ';
            'Copyright 2018-2019 The MathWorks, Inc.';
            ' ';
            'Grateful acknowledgement for assistance to';
            'Joyeeta Mukherjee, Ashish Uthama, Jeff Gruneich, PhD,';
            'Abhijit Bhattacharjee, and Sean de Wolski.'};
        helpdlg(message,'Acknowledgements')
    end %acknowledge

    function callCircleFinder(varargin)
        if exist('circleFinder.m','file') == 2
            thisImg = getimage(axToUse);
            circleFinder(thisImg);
        else
            hyperlnk = createHyperlink('http://www.mathworks.com/matlabcentral/fileexchange/34365-circle-finder','circleFinder');
            beep;
            fprintf('NOTE: Requires %s.\nPlease download and install it, and try again!)\n',hyperlnk);
        end
    end %callCircleFinder

    function callColorThresholder(varargin)
        thisImg = getimage(axToUse);
        if size(thisImg,3) == 3 %isrgb
            colorThresholder(thisImg);
        else
            beep
            disp('ColorThresholder operates on color images!')
        end
    end %callColorThresholder

    function callExploreRGB(varargin)
        if exist('exploreRGB.m','file') == 2
            thisImg = getimage(axToUse);
            if size(thisImg,3) == 3 %isrgb
                ExploreRGB(thisImg);
            else
                beep
                try
                    disp('Current image is not RGB; generating RGB image from figure''s colormap.');
                    thisImg = ind2rgb(thisImg,get(gcf,'colormap'));
                    ExploreRGB(thisImg);
                catch
                    disp('Unable to open this image in ExploreRGB; ExploreRGB operates on color (RGB) images!')
                end
            end
        else
            hyperlnk = createHyperlink('http://www.mathworks.com/matlabcentral/fileexchange/19706-explorergb','exploreRGB');
            beep;
            fprintf('NOTE: Requires %s.\nPlease download and install it, and try again!)\n',hyperlnk);
        end
    end %callExploreRGB

    function callImageAdjuster(varargin)
        if exist('ImageAdjuster.m','file') == 2
            thisImg = getimage(axToUse);
            ImageAdjuster(thisImg);
        else
            hyperlnk = createHyperlink('http://www.mathworks.com/matlabcentral/fileexchange/955-imageadjuster','imageAdjuster');
            beep;
            fprintf('NOTE: Requires %s.\nPlease download and install it, and try again!)\n',hyperlnk);
        end
    end %callImageAdjuster

    function callImageMorphology(varargin)
        if exist('imageMorphology.m','file') == 2
            thisImg = getimage(axToUse);
            imageMorphology(thisImg);
        else
            hyperlnk = createHyperlink('http://www.mathworks.com/matlabcentral/fileexchange/23697-image-morphology','imageMorphology');
            beep;
            fprintf('NOTE: Requires %s.\nPlease download and install it, and try again!)\n',hyperlnk);
        end
    end %callImageMorphology

    function callImageSegmenter(varargin)
        thisImg = getimage(axToUse);
        imageSegmenter(thisImg);
    end %callImageSegmenter

    function callMarkImagePoints(varargin)
        markImagePoints(axToUse);
    end %callMarkImagePoints

    function callSegmentImage(varargin)
        if exist('segmentImage.m','file') == 2
            thisImg = getimage(axToUse);
            segmentImage(thisImg);
        else
            hyperlnk = createHyperlink('http://www.mathworks.com/matlabcentral/fileexchange/48859-segment-images-interactively--and-generate-matlab-code','segmentImage');
            beep;
            fprintf('NOTE: Requires %s.\nPlease download and install it, and try again!)\n',hyperlnk);
        end
    end %callSegmentImage

    function icon = conditionIcon(icon,map,type,setToNaN,varargin)
        switch type
            case 1
                icon = ind2rgb(icon,map);
            case 2
                icon = im2double(icon);
            case 3
        end
        if ~isempty(setToNaN)
            icon(icon==setToNaN) = NaN;
        end
    end %conditionIcon

    function hyperlnk = createHyperlink(URL,label)
        hyperlnk = ['<a href="matlab: web(''',URL,''')">' label '</a>'];
    end %createHyperlink

    function getImageInfo(varargin)
        thumbnail = getimage(axToUse);
        whos(thumbnail);
        disp(info)
    end %getImageInfo

    function panIt(varargin)
        set(tsHandles.uitoggletools,'state','off')
        panButton = findobj(gcf,'Tooltipstring','Toggle Pan');
        h = pan;
        if strcmp(h.Enable,'on')
            set(panButton,'state','off')
            h.Enable = 'off';
        else
            set(panButton,'state','on')
            h.Enable = 'on';
        end

    end %panIt

    function zoomFig(~,~,zoomObject,direction)
        set(tsHandles.uitoggletools,'state','off')
       % zoomFig: Control zoom in/out via external buttons
        zoomInButton = findobj(zoomObject.FigureHandle,'tag','zoomIn');
        zoomOutButton = findobj(zoomObject.FigureHandle,'tag','zoomOut');
        set([zoomInButton,zoomOutButton],'state','off')
        if strcmp(zoomObject.Enable,'on') && strcmp(zoomObject.Direction,direction)
            zoomObject.Enable = 'off';
        else
            zoomObject.Direction = direction;
            if strcmp(direction,'in')
                zoomInButton.State = 'on';
            elseif strcmp(direction,'out')
                zoomOutButton.State = 'on';
            end
            zoomObject.Enable = 'on';
        end
    end %zoomFig

end %imageToolbar